name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: ap-northeast-1
  ECR_REGISTRY: 488363440930.dkr.ecr.ap-northeast-1.amazonaws.com

jobs:
  test-backend:
    runs-on: ubuntu-latest
    name: Test Backend

    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Run backend tests
      working-directory: ./backend
      run: mvn test

    - name: Build backend JAR
      working-directory: ./backend
      run: mvn clean package -DskipTests

  test-frontend:
    runs-on: ubuntu-latest
    name: Test Frontend

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/pnpm-lock.yaml

    - name: Install pnpm
      run: npm install -g pnpm

    - name: Install dependencies
      working-directory: ./frontend
      run: pnpm install

    - name: Run frontend tests
      working-directory: ./frontend
      run: pnpm test

    - name: Build frontend
      working-directory: ./frontend
      run: pnpm build

  build-and-push-images:
    runs-on: ubuntu-latest
    name: Build and Push Docker Images
    needs: [test-backend, test-frontend]
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and push backend image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./cicd/docker/backend/Dockerfile
        push: true
        tags: |
          ${{ env.ECR_REGISTRY }}/ticket-management-backend-dev:${{ env.IMAGE_TAG }}

    - name: Build and push frontend image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./cicd/docker/frontend/Dockerfile
        push: true
        tags: |
          ${{ env.ECR_REGISTRY }}/ticket-management-frontend-dev:${{ env.IMAGE_TAG }}

    - name: Image build summary
      run: |
        echo "‚úÖ Backend image: ${{ env.ECR_REGISTRY }}/ticket-management-backend-dev:${{ env.IMAGE_TAG }}"
        echo "‚úÖ Frontend image: ${{ env.ECR_REGISTRY }}/ticket-management-frontend-dev:${{ env.IMAGE_TAG }}"
        echo "üìù Note: Manual deployment required. Use kubectl set image to update deployments."