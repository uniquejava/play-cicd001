name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - 'cicd/docker/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - 'cicd/docker/**'

env:
  AWS_REGION: ap-northeast-1
  ECR_REGISTRY: 488363440930.dkr.ecr.ap-northeast-1.amazonaws.com

jobs:
  test-backend:
    runs-on: ubuntu-latest
    name: Test Backend

    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Run backend tests
      working-directory: ./backend
      run: mvn test

    - name: Build backend JAR
      working-directory: ./backend
      run: mvn clean package -DskipTests

  test-frontend:
    runs-on: ubuntu-latest
    name: Test Frontend

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'

    - name: Set up pnpm
      uses: pnpm/action-setup@v3
      with:
        version: 10.18.2

    - name: Install dependencies
      working-directory: ./frontend
      run: pnpm install --frozen-lockfile

    - name: Run frontend tests
      working-directory: ./frontend
      run: pnpm test

    - name: Build frontend
      working-directory: ./frontend
      run: pnpm build

  build-and-push-images:
    runs-on: ubuntu-latest
    name: Build and Push Docker Images
    needs: [test-backend, test-frontend]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
      continue-on-error: true

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      continue-on-error: true

    - name: Determine environment and image tag
      id: image-config
      run: |
        # Get short commit hash (8 characters)
        SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-8)

        if [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
          echo "environment=dev" >> $GITHUB_OUTPUT
          echo "image_tag=dev-${SHORT_SHA}" >> $GITHUB_OUTPUT
          echo "build_release=false" >> $GITHUB_OUTPUT
        elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "environment=prod" >> $GITHUB_OUTPUT
          echo "image_tag=latest" >> $GITHUB_OUTPUT
          echo "build_release=true" >> $GITHUB_OUTPUT
        fi

    - name: Automatic Tagging of Releases (Production only)
      id: increment-git-tag
      if: steps.image-config.outputs.build_release == 'true'
      run: |
        bash ./cicd/github_action/git_update.sh -v patch
        echo "image_tag=${{ steps.increment-git-tag.outputs.git-tag }}" >> $GITHUB_OUTPUT
      continue-on-error: true

    - name: Build and push backend image
      env:
        IMAGE_TAG: ${{ steps.image-config.outputs.image_tag }}
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./cicd/docker/backend/Dockerfile
        push: ${{ steps.login-ecr.outputs.registry != '' }}
        load: false
        tags: |
          ticket-management-backend:${{ env.IMAGE_TAG }}
          ${{ steps.login-ecr.outputs.registry != '' && format('{0}/ticket-management-backend:{1}', steps.login-ecr.outputs.registry, env.IMAGE_TAG) || '' }}
      continue-on-error: true

    - name: Build and push frontend image
      env:
        IMAGE_TAG: ${{ steps.image-config.outputs.image_tag }}
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./cicd/docker/frontend/Dockerfile
        push: ${{ steps.login-ecr.outputs.registry != '' }}
        load: false
        tags: |
          ticket-management-frontend:${{ env.IMAGE_TAG }}
          ${{ steps.login-ecr.outputs.registry != '' && format('{0}/ticket-management-frontend:{1}', steps.login-ecr.outputs.registry, env.IMAGE_TAG) || '' }}
      continue-on-error: true

    - name: Image build summary
      run: |
        echo "🎯 Environment: ${{ steps.image-config.outputs.environment }}"
        echo "🏷️ Image Tag: ${{ steps.image-config.outputs.image_tag }}"
        echo ""

        if [ "${{ steps.login-ecr.outputs.registry }}" != "" ]; then
          echo "✅ Backend image: ${{ steps.login-ecr.outputs.registry }}/ticket-management-backend:${{ steps.image-config.outputs.image_tag }}"
          echo "✅ Frontend image: ${{ steps.login-ecr.outputs.registry }}/ticket-management-frontend:${{ steps.image-config.outputs.image_tag }}"
          echo ""
          if [[ "${{ steps.image-config.outputs.environment }}" == "dev" ]]; then
            echo "🚀 Development images built and pushed to ECR!"
          else
            echo "🎉 Production images built and pushed to ECR!"
          fi
        else
          echo "✅ Backend image: ticket-management-backend:${{ steps.image-config.outputs.image_tag }} (local build only)"
          echo "✅ Frontend image: ticket-management-frontend:${{ steps.image-config.outputs.image_tag }} (local build only)"
          echo ""
          echo "📦 Docker images built successfully (ECR push skipped)"
          echo "💡 To enable ECR push, configure AWS credentials in repository secrets"
        fi